var Airtable = require("airtable");
var base = new Airtable({ apiKey: "keyzq3xHSrEDiYpBf" }).base(
  "appbVpEa2wHAr7q41",
);

const testResults = {
  "Select category": {
    scripting: [
      2555.88,
      2566.25,
      2578.25,
      2587.38,
      2600.88,
      2601.88,
      2604.5,
      2607.5,
      2607.5,
      2617.88,
      2622.5,
      2627.5,
      2638.75,
      2643.13,
      2649.75,
      2660,
    ],
    painting: [
      2.88,
      3,
      3.13,
      3.25,
      3.25,
      3.25,
      3.38,
      3.38,
      3.38,
      3.38,
      3.5,
      3.75,
      3.88,
      4.13,
      4.13,
      4.13,
    ],
    rendering: [
      422.38,
      426.13,
      426.38,
      435.13,
      443.5,
      461.38,
      463.38,
      473.5,
      475.38,
      481.75,
      482.88,
      484.38,
      484.63,
      485.25,
      532.25,
      537.38,
    ],
  },
  "Bind table data": {
    scripting: [
      2376,
      2389.13,
      2397.5,
      2403.13,
      2405.25,
      2414.25,
      2419.75,
      2422,
      2438,
      2449,
      2631.63,
      2694.75,
      2730.63,
      2801.38,
      2868.88,
      2885.25,
    ],
    painting: [
      7,
      8.63,
      8.88,
      9.5,
      9.75,
      10.25,
      11,
      11.25,
      11.88,
      12.13,
      12.25,
      12.75,
      12.75,
      14.13,
      15.88,
      16,
    ],
    rendering: [
      473.63,
      502.13,
      517,
      524,
      546.25,
      549.5,
      552.25,
      562.25,
      565.63,
      568.25,
      574.13,
      576.5,
      577.5,
      580.38,
      586.13,
      648,
    ],
  },
  "Click on table #comments": {
    scripting: [
      2354.88,
      2970.63,
      3008.5,
      3026,
      3038.88,
      3048.63,
      3051.13,
      3078.75,
      3150.63,
      3185.63,
      3188.75,
      3237.75,
      3286,
      3690.25,
      3798.38,
      3852.63,
    ],
    painting: [
      8.25,
      8.38,
      8.5,
      8.63,
      8.63,
      8.75,
      8.75,
      8.88,
      9,
      9.25,
      9.38,
      9.75,
      10.38,
      10.63,
      10.75,
      11.13,
    ],
    rendering: [
      218.13,
      242.25,
      244,
      244.25,
      246.13,
      246.13,
      246.75,
      248.88,
      250.25,
      250.63,
      254,
      256.88,
      261.63,
      271.5,
      318.38,
      320.25,
    ],
  },
  "Update title": {
    scripting: [
      9301.88,
      9921.25,
      10157.88,
      10293.25,
      10307.5,
      10313.13,
      10355.5,
      10438,
      10541.5,
      10561.63,
      10597,
      10598.88,
      10626.25,
      10694.5,
      10724.5,
      11006.38,
    ],
    painting: [
      22.63,
      23.25,
      23.88,
      24.75,
      25.5,
      25.88,
      25.88,
      26.88,
      27,
      27.25,
      27.38,
      27.5,
      28.38,
      29.13,
      34.13,
      49.5,
    ],
    rendering: [
      686.25,
      701.38,
      701.63,
      704.88,
      714.5,
      781.75,
      855,
      860.25,
      862.13,
      863.38,
      868.13,
      870.38,
      875.25,
      887.25,
      911.13,
      949.25,
    ],
  },
  "Open modal": {
    scripting: [
      2157,
      2186.38,
      2233.25,
      2241.25,
      2241.75,
      2268.38,
      2299.38,
      2302.38,
      2304.63,
      2305,
      2358.5,
      2402.88,
      2419.5,
      2832.38,
      2852.25,
      3115.5,
    ],
    painting: [
      5.75,
      6.13,
      6.13,
      6.38,
      6.75,
      6.88,
      7,
      7,
      7.13,
      7.25,
      7.25,
      7.25,
      7.5,
      7.5,
      7.63,
      11.13,
    ],
    rendering: [
      390.5,
      393.75,
      397.13,
      399.25,
      401.75,
      402.75,
      423.75,
      444.5,
      448.63,
      452.75,
      459.25,
      461.63,
      462.63,
      467.63,
      469.38,
      476.38,
    ],
  },
  "Close modal": {
    scripting: [
      1400.13,
      1402.88,
      1544.88,
      1564,
      1573.63,
      1586.75,
      1593.13,
      1599.5,
      1629.13,
      1631.88,
      1683.5,
      1709.63,
      1717.13,
      1870.13,
      2052,
      2464.25,
    ],
    painting: [
      3,
      3.63,
      3.88,
      4.13,
      4.13,
      4.38,
      4.38,
      4.38,
      4.5,
      4.63,
      4.88,
      5.38,
      5.63,
      7.38,
      7.5,
      7.5,
    ],
    rendering: [
      291,
      291,
      300.38,
      300.63,
      312.5,
      332.88,
      378.38,
      382.5,
      385,
      385.63,
      386.25,
      388,
      389.38,
      390.25,
      395.63,
      398.25,
    ],
  },
};

/**
 * Takes the results we get form parsed reports and converts them into rows
 * which can be stored in airtable
 */
const processResults = async (results) => {
  rows = [];
  Object.keys(results).forEach((action) => {
    Object.keys(results[action]).forEach((metric) => {
      let row = {};
      row["action"] = action;
      row["metric"] = metric;
      const runs = results[action][metric];
      runs.forEach((value, i) => {
        if (i < 5) {
          row[`run_${i + 1}`] = value;
        }
      });
      rows.push({ fields: row });
    });
  });

  return rows;
  try {
    await base("Runs").create(rows.slice(0, 10));
  } catch (e) {
    console.log(e);
  }
  // const processedRoes = rows.map(processRow);
};

const addToAirTable = async (rows) => {
  while (rows.length) {
    try {
      await base("Runs").create(rows.splice(0, 10));
    } catch (e) {
      console.log(e);
    }
  }
};
const storeResults = async (results) => {
  const rows = await processResults(results);
  await addToAirTable(rows);
};
storeResults(testResults);
